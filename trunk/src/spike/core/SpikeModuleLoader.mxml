<?xml version="1.0" encoding="utf-8"?>
<mx:VBox
    xmlns:mx="http://www.adobe.com/2006/mxml"
    initialize="init()">

  <mx:Metadata>
    [Event(name="childReady", type="spike.events.ChildReadyEvent")]
  </mx:Metadata>

  <mx:Script>
    <![CDATA[
      import flash.system.ApplicationDomain;
      import mx.core.Application;
      import mx.controls.Alert;
      import mx.core.IFlexDisplayObject;
      import mx.events.FlexEvent;
      import mx.events.ModuleEvent;
      import mx.events.MoveEvent;
      import mx.events.ChildExistenceChangedEvent;
      import mx.managers.PopUpManager;
      import mx.modules.IModuleInfo;
      import mx.modules.ModuleManager;
      import org.restfulx.Rx;
      import org.restfulx.utils.RxUtils;
      import spike.events.ChildReadyEvent;

      public var resource:String;

      [Bindable]
      protected var info:IModuleInfo;
      protected var child:DisplayObject;

      private var popUpWindow:DisplayObject;
      private var popUp:IFlexDisplayObject;
      private var preventWindowMove:Boolean = false;
      private var originalX:Number;
      private var originalY:Number;

      private function init():void {
        popUpWindow = progressWindow;
        popUp = popUpWindow as IFlexDisplayObject;
        removeChild(popUpWindow);

        addEventListener(ChildExistenceChangedEvent.CHILD_ADD, onAddChild);
      }

      public function loadModule():void {
        var swf:String = "";
        var re:RegExp = /.swf/i;
        if (re.test(resource))
          swf = resource;
        else
          swf = resource + ".swf";

        swf = SpikeModuleLoaderConfig.swfPath + swf;

        if (!RxUtils.isEmpty(Rx.httpRootUrl))
          swf = Rx.httpRootUrl + swf;

        if (SpikeModuleLoaderConfig.modificationParam != null)
          swf = swf + "?" + SpikeModuleLoaderConfig.modificationParam;

        var rebb:RegExp = new RegExp("//","g");
        swf = swf.replace(rebb, "/")

        info = ModuleManager.getModule(swf);

        info.addEventListener(ModuleEvent.PROGRESS, onProgress);
        info.addEventListener(ModuleEvent.SETUP, onSetup);
        info.addEventListener(ModuleEvent.READY, onReady);
        info.addEventListener(ModuleEvent.ERROR, onError);
        info.addEventListener(ModuleEvent.UNLOAD, onUnload);
  
        if (child) {
          try {
            removeChild(child);
          }
          catch (e:Error) { trace(e) } /* pode acontecer se foi criado um popup para child */
        } 
              
        showPopUp();
        info.load(ApplicationDomain.currentDomain);
      }
      
      public function getAndRemoveChild():DisplayObject {
        var d:DisplayObject = child;
        child = null;
        return d;
      }

      public function unloadModule():void {
        info.unload();
      }

      private function showPopUp():void {
        preventWindowMove = false;
        PopUpManager.addPopUp(popUp, this, true);
        originalX = progressWindow.x;
        originalY = progressWindow.y;
        preventWindowMove = true;
      }

      private function hidePopUp():void {
        PopUpManager.removePopUp(popUp);
      }

      private function preventMoving(event:MoveEvent):void {
        if (preventWindowMove) {
          event.preventDefault();
          event.stopPropagation();
          progressWindow.x = originalX;
          progressWindow.y = originalY;
        }
      }

      private function onProgress(event:ModuleEvent):void {
        progress.label = "%1 de %2 bytes obtidos...";
        progress.indeterminate = false;
      }

      private function onSetup(event:ModuleEvent):void {
        Rx.models.errors = null;
        progress.label = "M贸dulo inicializado.";
        progress.indeterminate = false;
      }

      private function onReady(event:ModuleEvent):void {
        progress.label = "M贸dulo carregado com sucesso.";
        hidePopUp();
        child = info.factory.create() as DisplayObject;
        addChild(child);
      }

      private function onAddChild(event:ChildExistenceChangedEvent):void {
        if (event.relatedObject == this.child)
          dispatchEvent(new ChildReadyEvent(ChildReadyEvent.CHILD_READY, event.relatedObject));
      }

      private function onError(event:ModuleEvent):void {
        hidePopUp();
        Alert.show(event.errorText, 'Erro ao carregar m贸dulo.');
      }

      private function onUnload(event:ModuleEvent):void {
        hidePopUp();
      }
    ]]>
  </mx:Script>

  <mx:TitleWindow id="progressWindow" title="Carregando m贸dulo"
      backgroundColor="#EEEEEE" layout="vertical"
      x="{(Application.application.width / 2) - (progressWindow.width / 2)}"
      y="{(Application.application.height / 2) - (progressWindow.height / 2)}"
      width="300"  move="preventMoving(event)"
      paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
    <mx:ProgressBar id="progress" source="{info}" height="100%" width="100%"/>
  </mx:TitleWindow>
</mx:VBox>
