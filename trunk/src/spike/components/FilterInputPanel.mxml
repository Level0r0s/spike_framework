<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml">
  
  <mx:Script>
    <![CDATA[
      import org.restfulx.collections.ModelsCollection;
      import org.restfulx.Rx;
      import org.restfulx.models.RxModel;
      import com.hurlant.util.der.Integer;
      import mx.controls.TextInput;
      import mx.controls.Label;
      import mx.containers.HBox;
      import mx.states.AddChild;
      import spike.models.AcFilter;
      import mx.controls.Alert;
      import spike.models.AcFilterDef;
    
      public var _filterDef: AcFilterDef;
      
      [Bindable]
      public var results: ModelsCollection;

      public function set filterDef(value: AcFilterDef): void{
        _filterDef = value;
        buildFilterDefPanel(_filterDef);
      }
      
      public function getParams(): Object{
        var i: int;
        var params: Object = new Object();

        params['filter_def_id'] = _filterDef.id.toString();

        for (i=0; i<filtersVBox.getChildren().length; i++){
          var renderedFilter: IRenderedFilter = filtersVBox.getChildAt(i) as IRenderedFilter; 
          var fillingValues: Object = renderedFilter.getFillingValues();
          var id: String = renderedFilter.filter.id.toString();
          params['ac_filter_' + id + '_is_filled'] = renderedFilter.isFilled();
          if (renderedFilter.isFilled())
            for (var p:String in fillingValues)
              params['ac_filter_' + id + '_' + p] = fillingValues[p];
          
        }
        return params;
      }
      
      public function checkRequired(): Object{
        var i: int;
        var allFilled: Boolean = true;

        for (i=0; i<filtersVBox.getChildren().length; i++){
          var renderedFilter: IRenderedFilter = filtersVBox.getChildAt(i) as IRenderedFilter; 
          allFilled = allFilled && renderedFilter.checkRequired();
        }
        return allFilled;
      }
      
      
      public function getParamsAsString(): String{
        var result: String = "";
        var p: Object = getParams();
        for (var tag:String in p) {
          result += tag + "=" + encodeURI(p[tag]) + "&";
        }
        return result;
      }
      
      public function onClickFind(event: MouseEvent): void{
        if (checkRequired()){
          var modelClass: Class = getDefinitionByName('sglweb.models.' + _filterDef.modelClass) as Class;
          Rx.models.reload(modelClass, null, null, null, getParams());
        }
        else
          Alert.show('Alguns filtros obrigatórios não foram preenchidos');
      }
      
      protected function buildFilterDefPanel(filterDef: AcFilterDef): void{
        filtersVBox.removeAllChildren();
        var filter: AcFilter;
        if (_filterDef != null)
          if (_filterDef.acFilters != null)
            for each(filter in _filterDef.acFilters)
              if (filter.queryUser)
                buildFilter(filter);
      }  
      
      protected function buildFilter(filter: AcFilter): void{
        if (filter.dataType == 'text')
          buildTextFilter(filter);
        if (filter.dataType == 'date')
          buildDateFilter(filter);
        if (filter.dataType == 'period')
          buildPeriodFilter(filter);
        if (filter.dataType == 'autocomplete')
          buildAutocompleteFilter(filter);
        if (filter.dataType == 'checkbox')
          buildCheckboxFilter(filter);
        if (filter.dataType == 'options')
          buildOptionsFilter(filter);
      }
      
      protected function buildTextFilter(filter: AcFilter): void{
        var f: FilterTextInput = new FilterTextInput();
        f.filter = filter;
        filtersVBox.addChild(f);
      }
      
      protected function buildDateFilter(filter: AcFilter): void{
        var f: FilterDateInput = new FilterDateInput();
        f.filter = filter;
        filtersVBox.addChild(f);
      }

      protected function buildPeriodFilter(filter: AcFilter): void{
        var f: FilterPeriodInput = new FilterPeriodInput();
        f.filter = filter;
        filtersVBox.addChild(f);
      }

      protected function buildAutocompleteFilter(filter: AcFilter): void{
        var f: FilterAutoCompleteInput = new FilterAutoCompleteInput();
        f.filter = filter;
        filtersVBox.addChild(f);
      }

      protected function buildCheckboxFilter(filter: AcFilter): void{
        var f: FilterCheckboxInput = new FilterCheckboxInput();
        f.filter = filter;
        filtersVBox.addChild(f);
      }

      protected function buildOptionsFilter(filter: AcFilter): void{
        var f: FilterOptionsInput = new FilterOptionsInput();
        f.filter = filter;
        filtersVBox.addChild(f);
      }

    ]]>
  </mx:Script>
  
  <mx:VBox id="filtersVBox" />
  <mx:Button label="Buscar" click="onClickFind(event)" />
  
  
</mx:VBox>
